name: "ohadz-ejs-gha"

on:   
  workflow_dispatch:

permissions:
  id-token: write
  contents: read 
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: 'ohadz-test-docker'
      IMAGE_NAME: 'ohadz-ejs-gha'
      BUILD_NAME: 'ohadz-ejs-gha'
   
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
  
      - name: Setup-JFrog-CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: ohadz-gh 
          oidc-audience: test-aud

      - name: Test JFrog CLI
        run: |
          jf c show
          jf rt ping
          jf -v
    
      - name: NPM Config
        run: jf npmc --repo-deploy ${{ vars.NPM_REPO }} --repo-resolve ${{ vars.NPM_REPO }} --global
        working-directory: ./Source
        
      - name: Install NPM Project
        run: |
          jf npm install --loglevel=verbose --build-name ${{env.JFROG_CLI_BUILD_NAME}} --build-number ${{env.JFROG_CLI_BUILD_NUMBER}}
          cat /home/runner/.npm/_logs/*debug-0.log
        working-directory: ./Source
    
   #   - name: Show the log
   #     run: cat /home/runner/.npm/_logs/*debug-0.log
      
      - name: NPM Publish
        run: jf npm publish --build-name ${{env.JFROG_CLI_BUILD_NAME}} --build-number ${{env.JFROG_CLI_BUILD_NUMBER}} 
        working-directory: ./Source

        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JF_URL }}
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
  
    #  - name: Docker Build and Push
    #    uses: docker/build-push-action@v5
    #    id: build
    #    with:
    #      push: false
    #     # load: true
    #      context: ./Source
    #      file: ./Source/Dockerfile
    #      tags: ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
    #      provenance: true  

      - name: Build Docker Image
        #env:
        #  ARTIFACTORY_URL: ${{ secrets.JF_NPM_URL }}
        #  ARTIFACTORY_USERNAME: ${{ secrets.JF_USERNAME }}
        #  ARTIFACTORY_API_KEY: ${{ secrets.JF_API_KEY }}
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.run_number }} ./Source 
       
      
      - name: Tag Docker Image
        run: docker tag ${{ env.IMAGE_NAME }}:${{ github.run_number }} ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

      - name: List Docker Images
        run: docker image ls
      
      - name: Deploy Docker image
        run: jf docker push ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} --build-name=${{ env.BUILD_NAME }} --build-number=${{ github.run_number }}
        working-directory: ./Source

      - name: Collect and Publish Build Info
        run: |
          # Collect environment variables for the build
          jf rt bce
          # Collect VCS details from git and add them to the build
          jf rt bag
          # Publish build info
          jf rt bp ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}
     
##      - name: Security Audit
##        run: jf audit --vuln # --sca --sast --secrets --without-contextual-analysis
##        working-directory: ./Source

      - name: Scan Build
        run: jf bs --fail=false --vuln --format table --rescan ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}} 

      - name: Curation Audit
        run: jf ca
        working-directory: ./Source

    
   #   - name: Promote build localy
        ## https://jfrog.com/help/r/jfrog-cli/promoting-a-build
        ## build promotion with includ dependencies, to copy the OSS depenencies to a local repostiory and adding build name and number as properties
   #     run: jf rt bpr --include-dependencies=true --props="buildName=${{env.JFROG_CLI_BUILD_NAME}};buildNumber=${{env.JFROG_CLI_BUILD_NUMBER}}" ${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}} ${{ vars.NPM_REPO }}
            
        
    #  - name: Create Release Bundle v2
        ## https://jfrog.com/help/r/jfrog-rest-apis/source-type-aql
        ## create a release bundle v2 based on properties using rest api, to include all oss dependencies as part of the build
        ## run: |
        ## curl --location 'https://soleng.jfrog.io/lifecycle/api/v2/release_bundle?async=false' --header 'Content-Type: application/json' --header 'X-JFrog-Signing-Key-Name: RBv2' --header 'Authorization: Bearer ${{ steps.setup-cli.outputs.oidc-token }}' --data-raw '{\"release_bundle_name\":\"ohadz-Create-RBv2-with-remote\",\"release_bundle_version\":\"${{env.JFROG_CLI_BUILD_NUMBER}}\",\"source_type\":\"aql\",\"source\":{\"aql\":\"items.find({       \"$and\": [         {           \"$or\": [             {               \"repo\": {                 \"$eq\": \"ohadz-test-npm-local\"               }             }           ]         },         {           \"$or\": [             {               \"@buildName\": \"SolEng-Maven-Build\"             },             {               \"@buildNumber\": \"${RELEASE_VERSION_NUMBER}\"             }           ]         }       ]     }).include(\"sha256\",     \"updated\",     \"modified_by\",     \"created\",     \"id\",     \"original_md5\",     \"depth\",     \"actual_sha1\",     \"property.value\",     \"modified\",     \"property.key\",     \"actual_md5\",     \"created_by\",     \"type\",     \"name\",     \"repo\",     \"original_sha1\",     \"size\",     \"path\")\"}}'
    #    run: jf rbc --spec=spec.json --signing-key=RBv2 --sync=true --spec-vars="SOURCE_REPO=${{ vars.NPM_REPO }};BUILD_NAME=${{env.JFROG_CLI_BUILD_NAME}};BUILD_VERSION_NUMBER=${{env.JFROG_CLI_BUILD_NUMBER}}" RB_${{env.JFROG_CLI_BUILD_NAME}} ${{env.JFROG_CLI_BUILD_NUMBER}}

   #   - name: docker scan
   #     run:  jf docker scan ${{ vars.DOCKER_REG_SRV }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
